// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////// model example ////////////
// model Sample {
//   id   Int    @id @default(autoincrement())
//   name String @unique @db.VarChar(100)

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//   @@map("sample")
// }

//////////// recurrence relation ////////////
// model Category {
//   id            Int        @id @default(autoincrement()) @map("id")
//   name          String     @unique @map("name") @db.VarChar(100)
//   products      Product[]
//   parentId      Int?       @map("parent_id")
//   parent        Category?  @relation("category_tree", fields: [parentId], references: [id])
//   subCategories Category[] @relation("category_tree")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//   @@map("categories")
// }

model User {
  id           Int     @id @default(autoincrement())
  // intraId      Int?    @unique @map("intra_id")
  // login        String  @unique @db.VarChar(10)
  email        String? @unique
  firstName    String? @map("first_name") @db.VarChar(50)
  lastName     String? @map("last_name") @db.VarChar(50)
  userName     String? @unique @map("user_name") @db.VarChar(50)
  imageUrl     String? @map("image_url") @db.VarChar(100)
  tfaSecret    String? @unique @map("tfa_secret")
  isTfaEnabled Boolean @default(false) @map("is_tfa_enabled")
  status       String? @default("i Love transcendece") @db.VarChar(50)

  friends             User[]          @relation("friends")
  friendsBy           User[]          @relation("friends")
  bannedUsers         User[]          @relation("banned_users")
  bannedBy            User[]          @relation("banned_users")
  profile             Profile?
  friendRequestFrom   FriendRequest[] @relation("friend_request_from")
  friendRequestTo     FriendRequest[] @relation("friend_request_to")
  conversationsAdmin  Conversation[]  @relation("admins")
  conversationsMember Conversation[]  @relation("members")
  messages            Message[]       @relation("user_messages")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")
  isFistSignIn        Boolean         @default(true) @map("is_first_sign_in")

  @@map(name: "user")
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  from      User     @relation("friend_request_from", fields: [fromId], references: [id])
  fromId    Int      @map("from_id")
  to        User     @relation("friend_request_to", fields: [toId], references: [id])
  toId      Int      @map("to_id")
  status    Int      @default(0) // 0: pending, 1: accepted, 2: rejected
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([fromId, toId], name: "friend_request_from_to")
  @@map(name: "friend_request")
}

model Profile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique @map("user_id")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchesWon  Match[] @relation("won")
  matchesLose Match[] @relation("lost")
  badges      Badge[]

  @@map(name: "profile")
}

model Match {
  id          Int      @id @default(autoincrement())
  winnerId    Int?     @map("winner_id")
  loserId     Int?     @map("loser_id")
  winner      Profile? @relation("won", fields: [winnerId], references: [id])
  loser       Profile? @relation("lost", fields: [loserId], references: [id])
  winnerScore Int      @default(0) @map("winner_score")
  loserScore  Int      @default(0) @map("losers_score")

  createdAt DateTime @default(now()) @map("created_at")

  @@map(name: "match")
}

model Conversation {
  id     Int    @id @default(autoincrement())
  type   String // dm or room
  name   String
  status Int // 0: public, 1: private , 2: locked

  password String?
  admins   User[]    @relation("admins")
  members  User[]    @relation("members")
  messages Message[]

  createdAt DateTime @default(now())

  @@map("conversations")
}

model Message {
  id              Int          @id @default(autoincrement())
  conversation_id Int
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  body            String

  sentById  Int
  sentBy    User     @relation("user_messages", fields: [sentById], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("messages")
}

model Badge {
  id          Int       @id @default(autoincrement())
  name        String
  descreption String
  profiles    Profile[]

  @@unique([id, name])
  @@map("badges")
}
